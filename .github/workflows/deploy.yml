
name: self-hosted Runner
on:
  push:
    branches:
      - main
      - qa
      - dev
jobs:
  deploy:
    runs-on: self-hosted
    steps:
      - name: Clonar repositorio
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref_name }}
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Setear nombre del servicio
        run: |
          if [ "${GITHUB_REF_NAME}" = "main" ]; then
            echo "SERVICE_NAME=web-prod" >> $GITHUB_ENV
          elif [ "${GITHUB_REF_NAME}" = "qa" ]; then
            echo "SERVICE_NAME=web-qa" >> $GITHUB_ENV
          elif [ "${GITHUB_REF_NAME}" = "dev" ]; then
            echo "SERVICE_NAME=web-dev" >> $GITHUB_ENV

          fi
      
      - name: Detener y eliminar contenedor
        run: |
          docker-compose stop $SERVICE_NAME || true
          docker-compose rm -f $SERVICE_NAME || true
      
      - name: Reconstruir y levantar contenedor
        run: |
          docker-compose up -d --build $SERVICE_NAME
      
      - name: Verificar que el contenedor est√© corriendo
        run: |
          sleep 10  # Dar tiempo para que el contenedor se inicie completamente
          
          # Verificar que el contenedor est√© corriendo
          if ! docker-compose ps $SERVICE_NAME | grep -q "Up"; then
            echo "‚ùå El contenedor $SERVICE_NAME no est√° corriendo"
            docker-compose logs $SERVICE_NAME
            exit 1
          fi
          
          echo "‚úÖ Contenedor $SERVICE_NAME est√° corriendo"
      
      - name: Verificar salud del contenedor
        run: |
          # Obtener el ID del contenedor
          CONTAINER_ID=$(docker-compose ps -q $SERVICE_NAME)
          
          if [ -z "$CONTAINER_ID" ]; then
            echo "‚ùå No se pudo obtener el ID del contenedor"
            exit 1
          fi
          
          # Verificar que el contenedor no haya crasheado
          CONTAINER_STATUS=$(docker inspect --format='{{.State.Status}}' $CONTAINER_ID)
          
          if [ "$CONTAINER_STATUS" != "running" ]; then
            echo "‚ùå El contenedor est√° en estado: $CONTAINER_STATUS"
            echo "üìã Logs del contenedor:"
            docker logs $CONTAINER_ID --tail 50
            exit 1
          fi
          
          echo "‚úÖ Contenedor en estado: $CONTAINER_STATUS"
      
      - name: Verificar logs por errores cr√≠ticos
        run: |
          # Verificar los √∫ltimos logs por errores comunes
          CONTAINER_ID=$(docker-compose ps -q $SERVICE_NAME)
          
          # Buscar errores cr√≠ticos en los logs (√∫ltimas 20 l√≠neas)
          ERROR_PATTERNS="error|Error|ERROR|exception|Exception|EXCEPTION|fatal|Fatal|FATAL|crashed|Crashed|CRASHED"
          
          if docker logs $CONTAINER_ID --tail 20 2>&1 | grep -iE "$ERROR_PATTERNS"; then
            echo "‚ö†Ô∏è  Se encontraron posibles errores en los logs"
            echo "üìã √öltimos logs:"
            docker logs $CONTAINER_ID --tail 50
            # No hacer exit 1 aqu√≠, ya que algunos errores pueden ser normales
            echo "‚ö†Ô∏è  Revisar logs manualmente para confirmar si son cr√≠ticos"
          else
            echo "‚úÖ No se encontraron errores cr√≠ticos en los logs recientes"

          fi




